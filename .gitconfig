[user]
	name = jeny3g
	email = mirandajean2009@gmail.com
[core]
	autocrlf = false
[alias]
	alias = "!git config -l | grep alias | cut -c 7-"
	branch-name = "!git rev-parse --abbrev-ref HEAD"
	state = "!git fetch origin && git remote show origin && :"
	sync = "!git fetch origin && git remote prune origin && :"
	lg = log --graph
	lg1 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
	lg2 = log --graph --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n'' %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
	develop = checkout develop
	master = checkout master
	new = checkout -b
	go = checkout
	new-feature = "!git checkout -b feature/$1 develop | echo 'criando feature'"
	new-release = "!git checkout -b release/$1 develop | echo 'criando release'"
	del = "!git checkout develop && git branch -D $1"
	branchUP = push origin --all
	fire = "!git add -A && git commit -m 'FIRE FIRE FIRE' && git push origin fire-branch"
	undo-commit = reset --soft HEAD~1
	publish = "!git push -u origin $(git branch-name)"
	pb = "!git push -u origin $(git branch-name)"
	atual = "!git rev-parse --abbrev-ref HEAD"
	assume = update-index --assume-unchanged
	unassume = update-index --no-assume-unchanged
	assumed = "!git ls-files -v | grep ^h | cut -c 3-"
	assumeall = "!git st -s | awk {'print $2'} | xargs git assume"
	st = stash
	stp = stash pop
	stl = stash list
	sta = stash apply
	sts = stash save
	find = "!git ls-files | grep -i"
	addcm = !git add . && git commit -am
	amend = commit --amend
	last-commit = log --name-status HEAD^..HEAD
	prune-origin = "!git fetch -p && for branch in `git branch -vv | grep ': gone]' | awk '{print $1}'`; do git branch -D $branch; done"
	s = !git status -s
	c = !git add --all && git commit -m
	l = !git log --pretty=format:'%C(blue)%h %C(red)%d%C(white)%s - %C(cyan)%cn, %C(green)%cr'
	docs = "!f() { [[ -z \"$GIT_PREFIX\" ]] || cd \"$GIT_PREFIX\" && if [ -z \"$1\" ]; then git commit -m \"docs: :books: \" -e; elif [ \"$1\" == \"-s\" ]; then git commit -m \"docs(${2}): :books: ${@:3}\"; else git commit -m \"docs: :books: ${@}\"; fi }; f"
	feat = "!f() { [[ -z \"$GIT_PREFIX\" ]] || cd \"$GIT_PREFIX\" && if [ -z \"$1\" ]; then git commit -m \"feat: :sparkles: \" -e; elif [ \"$1\" == \"-s\" ]; then git commit -m \"feat(${2}): :sparkles: ${@:3}\"; else git commit -m \"feat: :sparkles: ${@}\"; fi }; f"
	fix = "!f() { [[ -z \"$GIT_PREFIX\" ]] || cd \"$GIT_PREFIX\" && if [ -z \"$1\" ]; then git commit -m \"fix: :bug: \" -e; elif [ \"$1\" == \"-s\" ]; then git commit -m \"fix(${2}): :bug: ${@:3}\"; else git commit -m \"fix: :bug: ${@}\"; fi }; f"
	refactor = "!f() { [[ -z \"$GIT_PREFIX\" ]] || cd \"$GIT_PREFIX\" && if [ -z \"$1\" ]; then git commit -m \"refactor: :hammer: \" -e; elif [ \"$1\" == \"-s\" ]; then git commit -m \"refactor(${2}): :hammer: ${@:3}\"; else git commit -m \"refactor: :hammer: ${@}\"; fi }; f"
	style = "!f() { [[ -z \"$GIT_PREFIX\" ]] || cd \"$GIT_PREFIX\" && if [ -z \"$1\" ]; then git commit -m \"style: :art: \" -e; elif [ \"$1\" == \"-s\" ]; then git commit -m \"style(${2}): :art: ${@:3}\"; else git commit -m \"style: :art: ${@}\"; fi }; f"
	test = "!f() { [[ -z \"$GIT_PREFIX\" ]] || cd \"$GIT_PREFIX\" && if [ -z \"$1\" ]; then git commit -m \"test: :white_check_mark: \" -e; elif [ \"$1\" == \"-s\" ]; then git commit -m \"test(${2}): :white_check_mark: ${@:3}\"; else git commit -m \"test: :white_check_mark: ${@}\"; fi }; f"
	build = "!f() { [[ -z \"$GIT_PREFIX\" ]] || cd \"$GIT_PREFIX\" && if [ -z \"$1\" ]; then git commit -m \"build: :construction_worker: \" -e; elif [ \"$1\" == \"-s\" ]; then git commit -m \"build(${2}): :construction_worker: ${@:3}\"; else git commit -m \"build: :construction_worker: ${@}\"; fi }; f"
	hotfix = "!f() { [[ -z \"$GIT_PREFIX\" ]] || cd \"$GIT_PREFIX\" && if [ -z \"$1\" ]; then git commit -m \"hotfix: :ambulance: \" -e; elif [ \"$1\" == \"-s\" ]; then git commit -m \"hotfix(${2}): :ambulance: ${@:3}\"; else git commit -m \"hotfix: :ambulance: ${@}\"; fi }; f"
	initial = "!f() { [[ -z \"$GIT_PREFIX\" ]] || cd \"$GIT_PREFIX\" && if [ -z \"$1\" ]; then git commit -m \"init: :tada: \" -e; elif [ \"$1\" == \"-s\" ]; then git commit -m \"init(${2}): :tada: ${@:3}\"; else git commit -m \"init: :tada: ${@}\"; fi }; f"
	wip = "!f() { [[ -z \"$GIT_PREFIX\" ]] || cd \"$GIT_PREFIX\" && if [ -z \"$1\" ]; then git commit -m \"wip: :construction: \" -e; elif [ \"$1\" == \"-s\" ]; then git commit -m \"wip(${2}): :construction: ${@:3}\"; else git commit -m \"wip: :construction: ${@}\"; fi }; f"
	struct = "!f() { [[ -z \"$GIT_PREFIX\" ]] || cd \"$GIT_PREFIX\" && if [ -z \"$1\" ]; then git commit -m \"struct: :construction_worker: \" -e; elif [ \"$1\" == \"-s\" ]; then git commit -m \"struct(${2}): :construction_worker: ${@:3}\"; else git commit -m \"struct: :construction_worker: ${@}\"; fi }; f"
	perf = "!f() { [[ -z \"$GIT_PREFIX\" ]] || cd \"$GIT_PREFIX\" && if [ -z \"$1\" ]; then git commit -m \"perf: :racehorse: \" -e; elif [ \"$1\" == \"-s\" ]; then git commit -m \"perf(${2}): :racehorse: ${@:3}\"; else git commit -m \"perf: :racehorse: ${@}\"; fi }; f"
	ci = "!f() { [[ -z \"$GIT_PREFIX\" ]] || cd \"$GIT_PREFIX\" && if [ -z \"$1\" ]; then git commit -m \"ci: :construction_worker: \" -e; elif [ \"$1\" == \"-s\" ]; then git commit -m \"ci(${2}): :construction_worker: ${@:3}\"; else git commit -m \"ci: :construction_worker: ${@}\"; fi }; f"
	chore = "!f() { [[ -z \"$GIT_PREFIX\" ]] || cd \"$GIT_PREFIX\" && if [ -z \"$1\" ]; then git commit -m \"chore: :wrench: \" -e; elif [ \"$1\" == \"-s\" ]; then git commit -m \"chore(${2}): :wrench: ${@:3}\"; else git commit -m \"chore: :wrench: ${@}\"; fi }; f"
[init]
	defaultBranch = main
